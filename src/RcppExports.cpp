// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// uuid_generate_random
std::vector<std::string> uuid_generate_random(size_t n);
RcppExport SEXP _RcppUUID_uuid_generate_random(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(uuid_generate_random(n));
    return rcpp_result_gen;
END_RCPP
}
// uuid_generate_nil
std::vector<std::string> uuid_generate_nil(size_t n);
RcppExport SEXP _RcppUUID_uuid_generate_nil(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(uuid_generate_nil(n));
    return rcpp_result_gen;
END_RCPP
}
// uuid_generate_name
std::vector<std::string> uuid_generate_name(const std::vector<std::string>& x);
RcppExport SEXP _RcppUUID_uuid_generate_name(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(uuid_generate_name(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppUUID_uuid_generate_random", (DL_FUNC) &_RcppUUID_uuid_generate_random, 1},
    {"_RcppUUID_uuid_generate_nil", (DL_FUNC) &_RcppUUID_uuid_generate_nil, 1},
    {"_RcppUUID_uuid_generate_name", (DL_FUNC) &_RcppUUID_uuid_generate_name, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppUUID(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
